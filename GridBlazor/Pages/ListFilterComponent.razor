@using GridBlazor.Resources
@using GridShared

@typeparam T

@if (_init && Visible)
{
<div class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.DropdownMenu grid-dropdown" 
        style="display:block;position:relative;overflow:visible;@("margin-left:" + _offset.ToString() + "px;")" 
        @ref="listFilter" 
        @onkeyup="FilterKeyup" 
        @onclick:stopPropagation 
        
        @onkeyup:stopPropagation tabindex="-1">
    <div class="grid-dropdown-arrow" style="@("margin-left:" + (-_offset).ToString() + "px;")"></div>
    <div class="grid-dropdown-inner grid-dropdown-list-filter-class">
        <div class="grid-popup-widget">
            <div class="grid-filter-body">
                @if (_filterOptions.ShowSelectAllButtons)
                {
                    <div class="grid-buttons @GridHeaderComponent.GridComponent.Grid.HtmlClass.Mt050 @GridHeaderComponent.GridComponent.Grid.HtmlClass.Ml000 @GridHeaderComponent.GridComponent.Grid.HtmlClass.Mr050">
                        <div class="grid-filter-buttons">
                            <label class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.FormLabel @GridHeaderComponent.GridComponent.Grid.HtmlClass.Mr100"><b>@Strings.Select:</b></label>
                            <button type="button" class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.ButtonSecondary @GridHeaderComponent.GridComponent.Grid.HtmlClass.Mr050" @onclick="SelectVisibleButtonClicked" @onclick:stopPropagation>
                                @Strings.All
                            </button>
                            <button type="button" class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.ButtonSecondary" @onclick="UnselectVisibleButtonClicked" @onclick:stopPropagation>
                                @Strings.None
                            </button>
                        </div>
                    </div>
                }
                @if (_filterOptions.ShowSearchInput)
                {
                    <div class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.FormDivInput @GridHeaderComponent.GridComponent.Grid.HtmlClass.Mt050 @GridHeaderComponent.GridComponent.Grid.HtmlClass.My050">
                        <input type="text"
                               class="grid-filter-input @GridHeaderComponent.GridComponent.Grid.HtmlClass.FormInput" 
                               placeholder="@Strings.SearchFilterListInputText"
                               value="@SearchFilterListText"
                               @oninput="FilterTextChanged"/>
                    </div>
                }
                <div class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.Mt050 @GridHeaderComponent.GridComponent.Grid.HtmlClass.ListFilterValueLabel">
                    <label class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.FormLabel"><b>@Strings.FilterValueLabel:</b></label>
                </div>
                <ul class="grid-menu-list">
                    @foreach (var data in _visibleList)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("1") && x.Value.Equals(data.Value));
                        <li class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.Mb050">
                                <label class="grid-filter-list-label">
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => MyClickHandler(e, isChecked, data.Value)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => MyClickHandler(e, isChecked, data.Value)"/>
                                }
                                <span>
                                        @data.Title
                                </span>
                            </label>
                        </li>
                    }
                    @if (_includeIsNull)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("11"));
                        <li  class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.Mb050">
                            <label class="grid-filter-list-label">
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => IsNullHandler(e, isChecked)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => IsNullHandler(e, isChecked)"/>
                                }
                                <span>
                                    @Strings.IsNull
                                </span>
                            </label>
                        </li>
                    }
                    @if (_includeIsNotNull)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("12"));
                        <li  class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.Mb050">
                            <label class="grid-filter-list-label">
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => IsNotNullHandler(e, isChecked)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => IsNotNullHandler(e, isChecked)"/>
                                }
                                <span>
                                    @Strings.IsNotNull
                                </span>
                            </label>
                        </li>
                    }
                </ul>
                <div class="grid-buttons">
                    <div class="grid-filter-buttons">
                        <button type="button" class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.ButtonPrimary" @onclick="ApplyButtonClicked">
                            @Strings.ApplyFilterButtonText
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid-popup-additional">
            @if (_clearVisible)
            {
                <ul class="grid-menu-list">
                    <li  class="@GridHeaderComponent.GridComponent.Grid.HtmlClass.Mb050">
                        <a class="grid-filter-clear" href="javascript:void(0);" @onclick="ClearButtonClicked">
                            @Strings.ClearFilterLabel
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>
</div>
}
