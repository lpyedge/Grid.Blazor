@page "/multiplegrids"
@page "/multiplegrids/{OrdersGridState}/{CustomersGridState}"
@using GridBlazorClientSide.Client.ColumnCollections
@using GridBlazorClientSide.Shared.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IJSRuntime jSRuntime

<h1>Multiple Grids</h1>

<p>
    This page contains 2 grids. It also allows order editing. Both grid states are passed to the order edit page, so they can be returned to this page mantaining both grid states.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more documentation, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task1.IsCompleted && _task2.IsCompleted)
{
    <div class="@Program.HtmlClass.TabDiv">
        <ul @ref="labels" class="@Program.HtmlClass.TabList" @onclick:stopPropagation>
            <li class="@Program.HtmlClass.TabItem @Program.HtmlClass.TabItemActive" data-grid="tab-item" data-grid-id="0">
                <a class="@Program.HtmlClass.TabLink @Program.HtmlClass.TabLinkActive" data-grid="tab-link" data-grid-id="0" href="javascript:void(0);" @onclick="e => TabClicked(e, 0)">Orders</a>
            </li>
            <li class="@Program.HtmlClass.TabItem" data-grid="tab-item" data-grid-id="1">
                <a class="@Program.HtmlClass.TabLink" data-grid="tab-link" data-grid-id="1" href="javascript:void(0);" @onclick="e => TabClicked(e, 1)">Customers</a>
            </li>
        </ul>
        <div @ref="content" class="tab-content">
            <div class="tab-pane @Program.HtmlClass.TabPaneActive" data-grid="tab-pane" data-grid-id="0" id="orders">
                <div style="margin:20px">
                    <GridComponent T="Order" Grid="@_ordersGrid"></GridComponent>
                </div>
            </div>
            <div class="tab-pane @Program.HtmlClass.TabPaneHidden" data-grid="tab-pane" data-grid-id="1" id="customers">
                <div style="margin:20px">
                    <GridComponent T="Customer" Grid="@_customersGrid"></GridComponent>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private ICGrid _ordersGrid;
    private ICGrid _customersGrid;
    private Task _task1;
    private Task _task2;

    private ElementReference labels;
    private ElementReference content;


    [Parameter]
    public string OrdersGridState { get; set; }

    [Parameter]
    public string CustomersGridState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        // build the column collection passing an action list with the action executed by the ButtonCell component
        Action<IGridColumnCollection<Order>> orderColumns = c =>
            ColumnCollections.OrderColumnsMultipleGrids(c, new List<Func<object, Task>>() { MyFunction });

        var ordersQuery = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(OrdersGridState))
        {
            try
            {
                ordersQuery = StringExtensions.GetQuery(OrdersGridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }
        string ordersUrl = NavigationManager.BaseUri + "api/SampleData/OrderColumnsWithEdit";
        var ordersClient = new GridClient<Order>(HttpClient, ordersUrl, ordersQuery, false, "ordersGrid",
            orderColumns, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();
        _ordersGrid = ordersClient.Grid;

        // Set new items to grid
        _task1 = ordersClient.UpdateGrid();
        await _task1;

        var customersQuery = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(CustomersGridState))
        {
            try
            {
                customersQuery = StringExtensions.GetQuery(CustomersGridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }
        string customersUrl = NavigationManager.BaseUri + "api/SampleData/GetCustomersGrid";
        var customersClient = new GridClient<Customer>(HttpClient, customersUrl, customersQuery, false, "customersGrid",
            ColumnCollections.CustomersColumns, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();
        _customersGrid = customersClient.Grid;

        // Set new items to grid
        _task2 = customersClient.UpdateGrid();
        await _task2;
    }

    private async Task MyFunction(object item)
    {
        string ordersGridState = _ordersGrid.GetState();
        string customersGridState = _customersGrid.GetState();
        await Task.Run(() => 
            NavigationManager.NavigateTo($"/editorder/{((Order)item).OrderID.ToString()}/multiplegrids/{ordersGridState}/{customersGridState}"));
    }

    protected async Task TabClicked(MouseEventArgs e, int i)
    {
        await jSRuntime.InvokeVoidAsync("gridJsFunctions.setItemActive", labels, i, Program.HtmlClass.TabItemActive);
        await jSRuntime.InvokeVoidAsync("gridJsFunctions.setLinkActive", labels, i, Program.HtmlClass.TabLinkActive);
        await jSRuntime.InvokeVoidAsync("gridJsFunctions.setPaneActive", content, i,
            Program.HtmlClass.TabPaneActive, Program.HtmlClass.TabPaneHidden);
    }
}

