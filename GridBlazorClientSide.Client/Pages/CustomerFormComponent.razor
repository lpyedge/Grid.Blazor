@using GridBlazorClientSide.Shared.Models
@implements IFormCrudComponent<Order>
@inject ICrudDataService<Customer> customerService

<div class="@GridComponent.GridCrudHeaderCssClass">Customer</div>

@if (_customer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="@(Program.HtmlClass.FormGroupRow)">
            <label class="@Program.HtmlClass.FormLabel @(Program.HtmlClass.ColMd)2">CustomerID</label>
            <div class="@Program.HtmlClass.FormDivInput @(Program.HtmlClass.ColMd)5">
                <input class="@Program.HtmlClass.FormInput" readonly disabled value="@_customer.CustomerID" />
            </div>
        </div>

        <div class="@(Program.HtmlClass.FormGroupRow)">
            <label class="@Program.HtmlClass.FormLabel @(Program.HtmlClass.ColMd)2">Company Name</label>
            <div class="@Program.HtmlClass.FormDivInput @(Program.HtmlClass.ColMd)5">
                <input class="@Program.HtmlClass.FormInput" readonly disabled value="@_customer.CompanyName" />
            </div>
        </div>

        <div class="@(Program.HtmlClass.FormGroupRow)">
            <label class="@Program.HtmlClass.FormLabel @(Program.HtmlClass.ColMd)2">Contact Name</label>
            <div class="@Program.HtmlClass.FormDivInput @(Program.HtmlClass.ColMd)5">
                <input class="@Program.HtmlClass.FormInput" readonly disabled value="@_customer.ContactName" />
            </div>
        </div>

        <div class="@(Program.HtmlClass.FormGroupRow)">
            <label class="@Program.HtmlClass.FormLabel @(Program.HtmlClass.ColMd)2">Country</label>
            <div class="@Program.HtmlClass.FormDivInput @(Program.HtmlClass.ColMd)5">
                <input class="@Program.HtmlClass.FormInput" rreadonly disabled value="@_customer.Country" />
            </div>
        </div>

        <div style="display:flex;">
            <div>
                <button type="button" class="@Program.HtmlClass.ButtonPrimary" @onclick="() => BackButtonClicked()">Back</button>
            </div>
        </div>
    </div>
}

@code {
    private Customer _customer;

    [CascadingParameter(Name = "GridComponent")]
    protected GridComponent<Order> GridComponent { get; set; }

    [Parameter]
    public Order Item { get; set; }

    [Parameter]
    public GridMode ReturnMode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Item.CustomerID))
            await BackButtonClicked();
        else
            _customer = await customerService.Get(Item.CustomerID);
    }

    protected async Task BackButtonClicked()
    {
        if (ReturnMode == GridMode.Create)
            await GridComponent.CreateHandler(Item);
        else if (ReturnMode == GridMode.Read)
            await GridComponent.ReadHandler(Item);
        else if (ReturnMode == GridMode.Update)
            await GridComponent.UpdateHandler(Item);
        else if (ReturnMode == GridMode.Delete)
            await GridComponent.DeleteHandler(Item);
        else
            await GridComponent.Back();
    }
}